BEGIN;
SELECT plan(82);
--SELECT * FROM no_plan();

-- Check that we have the functions we think we have.
SELECT has_function(f)
  FROM unnest(ARRAY['check_dist_version', 'check_prev_versions']) AS f;

SELECT has_function('check_dist_version',   ARRAY['term', 'semver']);
SELECT has_function('check_prev_versions',  ARRAY['text[]', 'timestamp with time zone']);
SELECT has_function('check_later_versions', ARRAY['text[]', 'timestamp with time zone']);

-- User "pgxn" should not have access to the functions.
SELECT ok(
    NOT has_function_privilege('pgxn', 'check_dist_version(term, semver)', 'EXECUTE'),
    'User "pgxn" should not have EXECUTE priv on check_dist_version()'
);
SELECT ok(
    NOT has_function_privilege('pgxn', 'check_prev_versions(text[], timestamptz)', 'EXECUTE'),
    'User "pgxn" should not have EXECUTE priv on check_prev_versions()'
);

SELECT ok(
    NOT has_function_privilege('pgxn', 'check_later_versions(text[], timestamptz)', 'EXECUTE'),
    'User "pgxn" should not have EXECUTE priv on check_later_versions()'
);

/****************************************************************************/
-- Test check_dist_version().
SELECT function_returns('check_dist_version', 'void' );
SELECT function_lang_is('check_dist_version', 'plpgsql' );
SELECT volatility_is(   'check_dist_version', 'stable' );

SELECT lives_ok(
    $$ SELECT check_dist_version('widgets', '1.0.0') $$,
    'Should get no error from check_dist_version() for non-existent release'
);

-- We need a user.
SELECT ok(
    insert_user('theory', 'wet blanket', email := 'theory@pgxn.org'),
    'Insert user "theory"'
);

-- We need a distribution.
SELECT lives_ok($$
    INSERT INTO distributions (name, version, creator, sha1, meta, created_at)
    VALUES ('widgets', '1.0.0', 'theory', 'woot', '', NOW() - '4 days'::interval)
$$, 'Create widgets 1.0.0');

-- Should be okay with higher version.
SELECT lives_ok(
    $$ SELECT check_dist_version('widgets', '1.1.0') $$,
    'Should no error from check_dist_version() for higher version'
);

-- Should die on lower version.
SELECT throws_ok(
    $$ SELECT check_dist_version('widgets', '1.0.0-r1') $$,
    'P0001',
    'Distribution “widgets 1.0.0-r1” version not greater than previous minor release “widgets 1.0.0”',
    'Should get error from check_dist_version() for lower version'
);

-- Insert a few more versions.
SELECT lives_ok($$
    INSERT INTO distributions (name, version, creator, sha1, meta, created_at)
    VALUES ('widgets', '0.2.0', 'theory', 'ick', '', NOW() - '4 days'::interval)
         , ('widgets', '1.1.0', 'theory', 'ick', '', NOW() - '3 days'::interval)
         , ('widgets', '1.2.0-beta', 'theory', 'yeesh', '', NOW() - '2 days'::interval)
         , ('widgets', '1.3.0', 'theory', 'sick', '', NOW() - '1 day'::interval)
         , ('widgets', '1.3.2', 'theory', 'sick', '', NOW() - '16 hour'::interval)
$$, 'Create more widgets releases');

SELECT diag(version) FROM distributions WHERE name = 'widgets' ORDER BY version;

-- Should die on all existing versions lower than existing max versions.
SELECT throws_ok(
    $$ SELECT check_dist_version('widgets', '$$ || version || $$')$$,
    'P0001',
    'Distribution “widgets ' || version || '” version not greater than previous minor release “widgets ' || version || '”',
    'Should get error from check_dist_version() for version ' || version
) FROM unnest(ARRAY['1.0.0', '1.1.0', '1.2.0-beta', '1.3.2']) AS f(version);

-- Should die on all versions <= than existing version
SELECT throws_ok(
    $$ SELECT check_dist_version('widgets', '$$ || version || $$')$$,
    'P0001',
    'Distribution “widgets ' || version || '” version not greater than previous major release “widgets ' || existing || '”',
    'Should get error from check_dist_version() for version ' || version
) FROM (VALUES
    ('0.1.0', '0.2.0'),
    ('0.1.1', '0.2.0')
) f(version, existing);

-- Should fail on lower versions of existing minor versions and major versions
SELECT throws_ok(
    $$ SELECT check_dist_version('widgets', '$$ || version || $$')$$,
    'P0001',
    'Distribution “widgets ' || version || '” version not greater than previous minor release “widgets ' || existing || '”',
    'Should get error from check_dist_version() for version ' || version
) FROM (VALUES
    ('1.2.0-alpha', '1.2.0-beta'),
    ('1.3.1', '1.3.2'),
    ('1.1.0-x', '1.1.0'),
    ('1.3.0-r1', '1.3.2'),
    ('1.3.2', '1.3.2')
) f(version, existing);

-- But higher versions should be fine.
SELECT lives_ok(
    $$ SELECT check_dist_version('widgets', '$$ || version || $$')$$,
    'Should get no error from check_dist_version() for version ' || version
) FROM unnest(ARRAY['1.3.3', '1.4.0', '2.10.20', '1.0.1', '1.1.2', '0.2.1', '0.3.0']) AS f(version);

-- Add a different distribution.
SELECT lives_ok($$
    INSERT INTO distributions (name, version, creator, sha1, meta, created_at)
    VALUES ('pair', '4.0.0', 'theory', 'shake', '', NOW() - '1 day'::interval)
$$, 'Create pair 4.0.0');

-- Still should be okay with "widgets" versions.
SELECT lives_ok(
    $$ SELECT check_dist_version('widgets', '$$ || version || $$')$$,
    'Still should get no error from check_dist_version() for version ' || version
) FROM unnest(ARRAY['1.3.3', '1.4.0', '2.10.20', '5.5.5']) AS f(version);

-- But now "pair" lower versions should die.
SELECT throws_ok(
    $$ SELECT check_dist_version('pair', '$$ || version || $$')$$,
    'P0001',
    'Distribution “pair ' || version || '” version not greater than previous release “pair 4.0.0”',
    'Should get error from check_dist_version() for pair version ' || version
) FROM unnest(ARRAY['0.1.0', '1.0.0', '1.2.0', '3.9.0']) AS f(version);

-- Higher "pair" versions should be okay.
SELECT lives_ok(
    $$ SELECT check_dist_version('widgets', '$$ || version || $$')$$,
    'Still should get no error from check_dist_version() for pair version ' || version
) FROM unnest(ARRAY['4.0.1', '4.4.0', '5.10.20', '5.5.5']) AS f(version);

/****************************************************************************/
-- Test check_prev_versions().
SELECT function_returns('check_prev_versions', 'void' );
SELECT function_lang_is('check_prev_versions', 'plpgsql' );
SELECT volatility_is(   'check_prev_versions', 'stable' );

SELECT lives_ok(
    $$ SELECT check_prev_versions('{}') $$,
    'Should get no error from check_prev_versions() for non-existent extension'
);

-- Add an extension.
SELECT lives_ok($$
    INSERT INTO extensions (name, owner)
    VALUES ('thingy', 'theory')
$$, 'Insert "thingy" extension');

SELECT lives_ok($$
    INSERT INTO distribution_extensions (extension, ext_version, abstract, distribution, dist_version)
    VALUES ('thingy', '1.0.0', '', 'widgets', '1.0.0')
$$, 'Insert "thingy" 1.0.0');

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0-r1"}}', NOW() - '4 days'::interval) $$,
    'Should get no error for same release date'
);

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0"}}') $$,
    'Should get no error for same version'
);

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.1.0"}}') $$,
    'Should get no error for higher extension version'
);

SELECT throws_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0-r1"}}') $$,
    'P0001',
    E'One or more extension versions are less than previous versions:\n  * “thingy 1.0.0-r1” < “thingy 1.0.0”',
    'Should get error for lower extension version'
);

-- Okay, add another exension.
SELECT lives_ok($$
    INSERT INTO extensions (name, owner)
    VALUES ('sprocket', 'theory')
$$, 'Insert "sprocket" extension');

SELECT lives_ok($$
    INSERT INTO distribution_extensions (extension, ext_version, abstract, distribution, dist_version)
    VALUES ('sprocket', '1.0.0', '', 'widgets', '1.0.0')
$$, 'Insert "sprocket" 1.0.0');

SELECT lives_ok(
    $$ SELECT check_prev_versions(
        '{{"thingy", "1.0.0-r1"}, {"sprocket", "1.0.0-r1"}}',
        NOW() - '4 days'::interval
    ) $$, 'Should get no error for same distribution date'
);

SELECT lives_ok(
    $$ SELECT check_prev_versions(
        '{{"thingy", "1.0.0"}, {"sprocket", "1.0.0"}}'
    ) $$, 'Should get no error for same versions'
);

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.1.0"}, {"sprocket", "1.1.0"}}'
    ) $$, 'Should get no error for higher extension versions'
);

SELECT throws_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0-r1"}, {"sprocket", "1.0.0-r1"}}') $$,
    'P0001',
    E'One or more extension versions are less than previous versions:\n  * “sprocket 1.0.0-r1” < “sprocket 1.0.0”\n  * “thingy 1.0.0-r1” < “thingy 1.0.0”',
    'Should get error for lower extension versions'
);

-- Okay, insert another extension from a different distribution.
SELECT lives_ok($$
    INSERT INTO extensions (name, owner)
    VALUES ('pair', 'theory')
$$, 'Insert "pair" extension');

SELECT lives_ok($$
    INSERT INTO distribution_extensions (extension, ext_version, abstract, distribution, dist_version)
    VALUES ('pair', '4.0.0', '', 'pair', '4.0.0')
$$, 'Insert "pair" 4.0.0');

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0"}, {"sprocket", "1.0.0"}}') $$,
    'Should still get no error for the same extension versions'
);

SELECT throws_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0-r1"}, {"sprocket", "1.0.0-r1"}}') $$,
    'P0001',
    E'One or more extension versions are less than previous versions:\n  * “sprocket 1.0.0-r1” < “sprocket 1.0.0”\n  * “thingy 1.0.0-r1” < “thingy 1.0.0”',
    'Should still get error for lower extension version'
);

-- Okay, release a version of the "thingy" extesion in a different distribution.
SELECT lives_ok($$
    INSERT INTO distribution_extensions (extension, ext_version, abstract, distribution, dist_version)
    VALUES ('thingy', '4.0.0', '', 'pair', '4.0.0')
$$, 'Insert "thingy" 4.0.0');

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "4.0.0"}}') $$,
    'Should get no error for same new version'
);

SELECT throws_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0"}}') $$,
    'P0001',
    E'One or more extension versions are less than previous versions:\n  * “thingy 1.0.0” < “thingy 4.0.0”',
    'Should no error for previous version'
);

SELECT lives_ok(
    $$ SELECT check_prev_versions('{{"thingy", "1.0.0"}}', NOW() - '4 days'::interval) $$,
    'Should get no error for previous version and date'
);

/****************************************************************************/
-- Test check_later_versions().
SELECT function_returns('check_later_versions', 'void' );
SELECT function_lang_is('check_later_versions', 'plpgsql' );
SELECT volatility_is(   'check_later_versions', 'stable' );

SELECT lives_ok(
    $$ SELECT check_later_versions('{}', NOW()) $$,
    'Should get no error from check_later_versions() for non-existent extension'
);

SELECT lives_ok(
    $$ SELECT check_later_versions('{{"thingy", "1.0.0"}}', NOW() - '4 days'::interval) $$,
    'Should get no error for same release date'
);

SELECT lives_ok(
    $$ SELECT check_later_versions('{{"thingy", "4.0.0"}}', NOW() - '1 days'::interval) $$,
    'Should get no error for current version'
);

SELECT lives_ok(
    $$ SELECT check_later_versions('{{"thingy", "4.1.0"}}', NOW()) $$,
    'Should get no error for higher extension version'
);

SELECT throws_ok(
    $$ SELECT check_later_versions('{{"thingy", "4.1.0"}}', NOW() - '4 days'::interval) $$,
    'P0001',
    E'One or more extension versions are greater than later versions:\n  * “thingy 4.1.0” > “thingy 4.0.0”',
    'Should get error for higher extension version'
);

SELECT lives_ok(
    $$ SELECT check_later_versions('{{"thingy", "1.0.0", "sprocket", "1.0.0"}}', NOW() - '4 days'::interval) $$,
    'Should get no errors for same release date'
);

SELECT throws_ok(
    $$ SELECT check_later_versions('{{"thingy", "1.1.0"}, {"sprocket", "1.1.0"}}', NOW() - '5 days'::interval) $$,
    'P0001',
    E'One or more extension versions are greater than later versions:\n  * “sprocket 1.1.0” > “sprocket 1.0.0”\n  * “thingy 1.1.0” > “thingy 1.0.0”',
    'Should get error for higer extension versions'
);

SELECT * FROM finish();
ROLLBACK;
