SET search_path = public,contrib,tap;

BEGIN;
--SELECT plan(43);
SELECT * FROM no_plan();

/****************************************************************************/
-- Assertion function for validating JSON.
CREATE OR REPLACE FUNCTION json_ok(
    json  TEXT,
    descr TEXT
) RETURNS TEXT LANGUAGE plperl AS $$
    eval { JSON::XS->new->decode(shift) };
    my $ok = sub {
        my ($bool, $descr, $diag) = @_;
        my $ret = spi_exec_query(
            sprintf 'SELECT ok(%s, %s)', $bool, quote_nullable($descr)
        )->{rows}[0]{ok};
        $ret .= "\n" . spi_exec_query(
            sprintf 'SELECT diag(%s)', quote_nullable("    Error: $diag")
        )->{rows}[0]{diag} if $diag;
        return $ret;
    };
    if (my $e = $@) {
        return $ok->('false', shift, $e);
    } else {
        return $ok->('true', shift);
    }
$$;

/****************************************************************************/
-- Test munge_email().

SELECT has_function(    'munge_email' );
SELECT has_function(    'munge_email', ARRAY['email'] );
SELECT function_returns('munge_email', ARRAY['email'], 'text' );
SELECT function_lang_is('munge_email', ARRAY['email'], 'plpgsql' );
SELECT is_strict(       'munge_email', ARRAY['email'] );
SELECT volatility_is(   'munge_email', ARRAY['email'], 'immutable' );
SELECT ok(
    has_function_privilege('pgxn', 'munge_email(email)', 'EXECUTE'),
    'User "pgxn" should have EXECUTE priv on munge_email()'
);

SELECT is( munge_email('foo@bar.com'), 'bar.com|foo', 'munge_email(email)');
SELECT is( munge_email(NULL), NULL, 'munge_email(NULL)');

/****************************************************************************/
-- Test get_mirrors_json().

SELECT has_function(    'get_mirrors_json' );
SELECT has_function(    'get_mirrors_json', '{}'::text[] );
SELECT function_returns('get_mirrors_json', 'text' );
SELECT function_lang_is('get_mirrors_json', 'sql' );
SELECT volatility_is(   'get_mirrors_json', 'stable' );
SELECT is_strict(       'get_mirrors_json', 'stable' );
SELECT ok(
    has_function_privilege('pgxn', 'get_mirrors_json()', 'EXECUTE'),
    'User "pgxn" should have EXECUTE priv on get_mirrors_json()'
);

SELECT is(
    get_mirrors_json(),
    E'[\n   \n]\n',
    'Should get empty JSON array with no mirrors'
);

SELECT json_ok(get_mirrors_json(), 'Empty JSON array should be valid');

SELECT ok(
    insert_user('theory', 'wet blanket', email := 'theory@pgxn.org'),
    'Insert user "theory"'
);
UPDATE users SET is_admin = true WHERE nickname = 'theory';

SELECT ok(
    insert_mirror(
        'theory',
        uri          := 'http://example.com/pgxn/',
        frequency    := 'hourly',
        location     := 'Portland, OR, USA',
        bandwidth    := '10MBps',
        organization := 'Kineticode, Inc.',
        timezone     := 'America/Los_Angeles',
        contact      := 'pgxn@example.com',
        src          := 'rsync://master.pgxn.org/pgxn/'
    ), 'Insert a mirror'
);

SELECT is(
    get_mirrors_json(),
    '[
   {
      "uri": "http://example.com/pgxn/",
      "frequency": "hourly",
      "location": "Portland, OR, USA",
      "organization": "Kineticode, Inc.",
      "timezone": "America/Los_Angeles",
      "contact": "example.com|pgxn",
      "bandwidth": "10MBps",
      "src": "rsync://master.pgxn.org/pgxn/"
   }
]
',
    'Should get single-item JSON array with one mirror'
);

SELECT json_ok(get_mirrors_json(), 'Single-item mirror JSON should be valid');

-- Add another mirror with rsync and notes keys.
SELECT ok(
    insert_mirror(
        'theory',
        uri          := 'http://pgxn.example.net/',
        frequency    := 'daily',
        location     := 'Portland, OR, USA',
        bandwidth    := 'Cable',
        organization := 'David E. Wheeler',
        timezone     := 'America/Los_Angeles',
        contact      := 'pgxn@example.net',
        src          := 'rsync://master.pgxn.org/pgxn/',
        rsync        := 'rsync://master.pgxn.org/pgxn/',
        notes        := 'These be some notes, yo'
    ), 'Insert a mirror'
);

-- Ensure the display order.
UPDATE mirrors SET created_at = NOW() - '1 day'::interval
 WHERE uri = 'http://example.com/pgxn/';

SELECT is(
    get_mirrors_json(),
    '[
   {
      "uri": "http://example.com/pgxn/",
      "frequency": "hourly",
      "location": "Portland, OR, USA",
      "organization": "Kineticode, Inc.",
      "timezone": "America/Los_Angeles",
      "contact": "example.com|pgxn",
      "bandwidth": "10MBps",
      "src": "rsync://master.pgxn.org/pgxn/"
   },
   {
      "uri": "http://pgxn.example.net/",
      "frequency": "daily",
      "location": "Portland, OR, USA",
      "organization": "David E. Wheeler",
      "timezone": "America/Los_Angeles",
      "contact": "example.net|pgxn",
      "bandwidth": "Cable",
      "src": "rsync://master.pgxn.org/pgxn/",
      "rsync": "rsync://master.pgxn.org/pgxn/",
      "notes": "These be some notes, yo"
   }
]
',
    'Should get two-item-item JSON array with two mirrors'
);

SELECT json_ok(get_mirrors_json(), 'Two-item mirror JSON should be valid');

/****************************************************************************/
-- Test by_extension_json().

SELECT has_function(    'by_extension_json' );
SELECT has_function(    'by_extension_json', ARRAY['text', 'semver'] );
SELECT function_returns('by_extension_json', ARRAY['text', 'semver'], 'setof record' );
SELECT function_lang_is('by_extension_json', ARRAY['text', 'semver'], 'sql' );
SELECT volatility_is(   'by_extension_json', ARRAY['text', 'semver'], 'stable' );
SELECT is_strict(       'by_extension_json', ARRAY['text', 'semver'] );
SELECT ok(
    has_function_privilege('pgxn', 'by_extension_json(text, semver)', 'EXECUTE'),
    'User "pgxn" should have EXECUTE priv on by_extension_json()'
);

SELECT is_empty(
    $$ SELECT * FROM by_extension_json(NULL, NULL) $$,
    'Should get no results from by_extension_json() when no extensions'
);

-- Let's create a distribution.
SELECT ok(
     add_distribution('theory', 'pshaw', '{
        "name": "pair",
        "version": "0.0.01",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered pair",
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "0.02.02" },
            "trip": { "file": "trip.sql.in", "version": "0.02.01" }
        },
        "release_status": "testing"
    }') IS NOT NULL,
    'Add a testing distribution'
);

SELECT results_eq(
    $$ SELECT * FROM by_extension_json('pair', '0.0.1') $$,
    $$ VALUES
        ('pair'::citext, '{
   "testing": "0.2.2",
   "releases": {
      "0.2.2": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
'),
        ('trip', '{
   "testing": "0.2.1",
   "releases": {
      "0.2.1": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
')
    $$,
    'Should get proper data for extensions in a single distribution'
);

-- Add an unstable distribution.
SELECT ok(
     add_distribution('theory', 'pshaw', '{
        "name": "pair",
        "version": "0.0.2a1",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered pair",
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "0.02.03" },
            "trip": { "file": "trip.sql.in", "version": "0.02.02" }
        },
        "release_status": "unstable"
    }') IS NOT NULL,
    'Add an unstable distribution'
);

SELECT results_eq(
    $$ SELECT * FROM by_extension_json('pair', '0.0.2a1') $$,
    $$ VALUES
        ('pair'::citext, '{
   "testing": "0.2.2",
   "unstable": "0.2.3",
   "releases": {
      "0.2.3": { "dist": "pair", "version": "0.0.2a1", "status": "unstable" },
      "0.2.2": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
'),
        ('trip', '{
   "testing": "0.2.1",
   "unstable": "0.2.2",
   "releases": {
      "0.2.2": { "dist": "pair", "version": "0.0.2a1", "status": "unstable" },
      "0.2.1": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
')
    $$,
    'Should get proper data for extensions in a testing and unstable distributions'
);

-- Add an stable distribution.
SELECT ok(
     add_distribution('theory', 'pshaw', '{
        "name": "pair",
        "version": "0.0.2",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered pair",
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "0.2.4" },
            "trip": { "file": "trip.sql.in", "version": "0.2.3" }
        }
    }') IS NOT NULL,
    'Add a stable distribution'
);

SELECT results_eq(
    $$ SELECT * FROM by_extension_json('pair', '0.0.2') $$,
    $$ VALUES
        ('pair'::citext, '{
   "stable": "0.2.4",
   "testing": "0.2.2",
   "unstable": "0.2.3",
   "releases": {
      "0.2.4": { "dist": "pair", "version": "0.0.2" },
      "0.2.3": { "dist": "pair", "version": "0.0.2a1", "status": "unstable" },
      "0.2.2": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
'),
        ('trip', '{
   "stable": "0.2.3",
   "testing": "0.2.1",
   "unstable": "0.2.2",
   "releases": {
      "0.2.3": { "dist": "pair", "version": "0.0.2" },
      "0.2.2": { "dist": "pair", "version": "0.0.2a1", "status": "unstable" },
      "0.2.1": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
')
    $$,
    'Should get proper data for extensions in multiple distributions'
);

SELECT json_ok(json, 'JSON for extension ' || extension || ' should be valid')
  FROM by_extension_json('pair', '0.0.2');

-- Now have strongrrl do a release with only the "trip" type.
SELECT ok(
    insert_user('strongrrl', 'wet blanket', email := 'strongrrl@pgxn.org'),
    'Insert user "strongrrl"'
);

UPDATE users SET status = 'active';
INSERT INTO coowners (extension, nickname) VALUES ('trip', 'strongrrl');

SELECT ok(
     add_distribution('strongrrl', 'pshaw', '{
        "name": "trip",
        "version": "0.2.5",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered triplet"
    }') IS NOT NULL,
    'Add a trip distribution'
);

SELECT results_eq(
    $$ SELECT * FROM by_extension_json('trip', '0.2.5') $$,
    $$ VALUES
        ('trip'::citext, '{
   "stable": "0.2.5",
   "testing": "0.2.1",
   "unstable": "0.2.2",
   "releases": {
      "0.2.5": { "dist": "trip", "version": "0.2.5" },
      "0.2.3": { "dist": "pair", "version": "0.0.2" },
      "0.2.2": { "dist": "pair", "version": "0.0.2a1", "status": "unstable" },
      "0.2.1": { "dist": "pair", "version": "0.0.1", "status": "testing" }
   }
}
')
    $$,
    'Should get proper data for extensions in the "trip" distribution'
);

SELECT json_ok(json, 'JSON for extension ' || extension || ' should be valid')
  FROM by_extension_json('trip', '0.2.5');

/****************************************************************************/
-- Test by_dist_json().

SELECT has_function(    'by_dist_json' );
SELECT has_function(    'by_dist_json', ARRAY['text'] );
SELECT function_returns('by_dist_json', ARRAY['text'], 'text' );
SELECT function_lang_is('by_dist_json', ARRAY['text'], 'sql' );
SELECT volatility_is(   'by_dist_json', ARRAY['text'], 'stable' );
SELECT is_strict(       'by_dist_json', ARRAY['text'] );
SELECT ok(
    has_function_privilege('pgxn', 'by_dist_json(text)', 'EXECUTE'),
    'User "pgxn" should have EXECUTE priv on by_dist_json()'
);

SELECT is(
    by_dist_json(NULL), NULL,
    'Should get NULL value from by_dist_json() for NULL distribution'
);

SELECT is(
    by_dist_json('nothing'), NULL,
    'Should get NULL value from by_dist_json() for non-existent distribution'
);

SELECT is(
    by_dist_json('pair'), '{
   "name": "pair",
   "releases": {
      "stable": ["0.0.2"],
      "testing": ["0.0.1"],
      "unstable": ["0.0.2a1"]
   }
}
', 'Should get expected JSON for distribution "pair"');

SELECT json_ok(by_dist_json('pair'), '...And the JSON should be valid');

-- Add version 0.0.10.
SELECT ok(
     add_distribution('theory', 'pshaw', '{
        "name": "pair",
        "version": "0.0.10",
        "license": "postgresql",
        "maintainer": "theory",
        "abstract": "Ordered pair",
        "provides": {
            "pair": { "file": "pair.sql.in", "version": "0.02.10" },
            "trip": { "file": "trip.sql.in", "version": "0.02.10" }
        }
    }') IS NOT NULL,
    'Add a stable distribution pair 0.0.10'
);

SELECT is(
    by_dist_json('pair'), '{
   "name": "pair",
   "releases": {
      "stable": ["0.0.10", "0.0.2"],
      "testing": ["0.0.1"],
      "unstable": ["0.0.2a1"]
   }
}
', '0.0.10 should be greater than 0.0.2 in the "pair" JSON');

SELECT json_ok(by_dist_json('pair'), '...And that JSON should be valid');

-- Select another distribution.
SELECT is(
    by_dist_json('trip'), '{
   "name": "trip",
   "releases": {
      "stable": ["0.2.5"]
   }
}
', 'Should get expected JSON for distribution "trip"');

SELECT json_ok(by_dist_json('trip'), '...And its JSON should be valid');


SELECT * FROM finish();
ROLLBACK;
